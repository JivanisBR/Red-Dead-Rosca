#include "raylib.h"
#include <string>
#include <vector>
#include <cmath> // Para a função fabs (valor absoluto)

// Para evitar a necessidade de usar 'std::' antes de string
using std::string;

//==================================================================================
// DECLARAÇÃO DE TODAS AS VARIÁVEIS GLOBAIS
// (Equivalente à declaração de variáveis no início do seu programa)
//==================================================================================

// Texturas (imagens)
Texture2D cenario, roleta, bala, p1wins, p2wins, neg, oneshotcontrols, bangbangcontrols, start, p1controls, p2controls, contag, back, pauser;
Texture2D cb1, cb1i, cb2, cb2i, chapeu1, chapeu2, credits, menui, logo, modoi;

// Variáveis de ambiente e sistema
int cenario_x=0, cenario_y=0;
int n1x, n1y, aux=0;
int n2x, n2y;
int n3x, n3y;
int n4x, n4y;
int n5x, n5y;
int n6x, n6y;
int tamx, tamy;
int tamx2, tamy2;
int tamx3, tamy3;
int tamx4, tamy4;
int tamx5, tamy5;
int tamx6, tamy6;
int bot=0;
int p1wins_x=230, p1wins_y=100;
int p2wins_x=200, p2wins_y=100;
int neg_x=350, neg_y=0;
int dnv=0;

// PLAYER 1
int cb_x = 100, cb_y = 560;
int jmp=0, pow=0, mun=6, abx=0, dead1=0, fall=0;
int bala_x; // Posição será baseada no jogador
int hb1x, hb1y;
bool r1=false, tomo=false;
int r1c=600, vida=100, passos=0;

// Partículas de Sangue P1
bool sang1 = false, sang2 = false, sang3 = false, sang4 = false, sang5 = false;
int qntsang = 0;
// Sangue 1
int sangx1 = 0, sangy1 = 0, tamsangx1 = 0, tamsangy1 = 0, contsang1 = 0;
float sang_vel_x1 = 0.0f, sang_vel_y1 = 0.0f;
// Sangue 2
int sangx2 = 0, sangy2 = 0, tamsangx2 = 0, tamsangy2 = 0, contsang2 = 0;
float sang_vel_x2 = 0.0f, sang_vel_y2 = 0.0f;
// Sangue 3
int sangx3 = 0, sangy3 = 0, tamsangx3 = 0, tamsangy3 = 0, contsang3 = 0;
float sang_vel_x3 = 0.0f, sang_vel_y3 = 0.0f;
// Sangue 4
int sangx4 = 0, sangy4 = 0, tamsangx4 = 0, tamsangy4 = 0, contsang4 = 0;
float sang_vel_x4 = 0.0f, sang_vel_y4 = 0.0f;
// Sangue 5
int sangx5 = 0, sangy5 = 0, tamsangx5 = 0, tamsangy5 = 0, contsang5 = 0;
float sang_vel_x5 = 0.0f, sang_vel_y5 = 0.0f;

// PLAYER 2
int cb2_x = 1100, cb2_y = 563;
int jmp2=0, pow2=0, mun2=6, abx2=0, dead2=0, fall2=0;
int bala2_x; // Posição será baseada no jogador
int hb2x, hb2y;
bool r2=false, tomo2=false;
int r2c=600, vida2=100, passos2=0;

// Partículas de Sangue P2
bool sang21 = false, sang22 = false, sang23 = false, sang24 = false, sang25 = false;
int qntsang2 = 0;
// Sangue 1
int sang2x1 = 0, sang2y1 = 0, tamsang2x1 = 0, tamsang2y1 = 0, cont2sang1 = 0;
float sang2_vel_x1 = 0.0f, sang2_vel_y1 = 0.0f;
// Sangue 2
int sang2x2 = 0, sang2y2 = 0, tamsang2x2 = 0, tamsang2y2 = 0, cont2sang2 = 0;
float sang2_vel_x2 = 0.0f, sang2_vel_y2 = 0.0f;
// Sangue 3
int sang2x3 = 0, sang2y3 = 0, tamsang2x3 = 0, tamsang2y3 = 0, cont2sang3 = 0;
float sang2_vel_x3 = 0.0f, sang2_vel_y3 = 0.0f;
// Sangue 4
int sang2x4 = 0, sang2y4 = 0, tamsang2x4 = 0, tamsang2y4 = 0, cont2sang4 = 0;
float sang2_vel_x4 = 0.0f, sang2_vel_y4 = 0.0f;
// Sangue 5
int sang2x5 = 0, sang2y5 = 0, tamsang2x5 = 0, tamsang2y5 = 0, cont2sang5 = 0;
float sang2_vel_x5 = 0.0f, sang2_vel_y5 = 0.0f;

// VARIÁVEIS DOS CHAPÉUS
// Chapéu 1
float chapeu1_x, chapeu1_y;
float chapeu1_vel_x = 0.0f, chapeu1_vel_y = 0.0f;
bool tem_chapeu1 = true;
bool chapeu1_caindo = false;
// Chapéu 2
float chapeu2_x, chapeu2_y;
float chapeu2_vel_x = 0.0f, chapeu2_vel_y = 0.0f;
bool tem_chapeu2 = true;
bool chapeu2_caindo = false;
const float GRAVIDADE_CHAPEU = 0.2f;

// MENU
int tamtelax=1200, tamtelay=700;
bool menu=true;
int cdpause=0, pisca=0;
int opt=1;
bool creds = false;
bool modo = false;
bool quit = false;
bool bangbang=false;
bool oneshot=false;
bool solo = false;
bool pause = false;
int ldr=0;

// MODO BANGBANG
const int MAX_BALAS = 10;
int bala1v_x[MAX_BALAS], bala1v_y[MAX_BALAS];
bool bala1_ativo[MAX_BALAS] = {false};
int bala2v_x[MAX_BALAS], bala2v_y[MAX_BALAS];
bool bala2_ativo[MAX_BALAS] = {false};
int direcao_bala1[MAX_BALAS], direcao_bala2[MAX_BALAS];
int y_inicial_bala1[MAX_BALAS], y_inicial_bala2[MAX_BALAS];
int cooldown1 = 0, cooldown2 = 0;
int reload1 = 0, reload2 = 0;
const int VELOCIDADE_BALA = 15;
const int DANOO = 25;
bool espaco_pressionado = false;
bool m_pressionado = false;
bool inv1=false, inv2=false;
int win1=0, win2=0;
bool bangmenu=false;

// Variáveis de pulo para Player 1
float vel_y1 = 0.0f;
bool pulando1 = false;
const float GRAVIDADE = 0.9f;
const float FORCA_PULO_INICIAL = 15.0f;
const float FORCA_PULO_SUSTENTADA = 0.4f;
const float CHAO = 560.0f;

// Variáveis de pulo para Player 2
float vel_y2 = 0.0f;
bool pulando2 = false;

// Variáveis de knockback ao ser atingido
float vel_x_knock1 = 0.0f;
float vel_x_knock2 = 0.0f;
const float KNOCKBACK_FORCA = 5.0f;
const float DESACELERACAO_KNOCK = 0.2f;

// Variáveis de morte
float vel_x_morte1 = 0.0f, vel_y_morte1 = 0.0f;
bool morrendo1 = false;
float vel_x_morte2 = 0.0f, vel_y_morte2 = 0.0f;
bool morrendo2 = false;
const float EMPURRAO_CHAO = 5.0f;
const float EMPURRAO_AR_X = 7.0f;
const float EMPURRAO_AR_Y = -8.0f;
const float DESACELERACAO_X = 0.2f;
const float GRAVIDADE_PARTICULA = 0.5f;

// Variáveis de agachamento
bool agachado1 = false;
bool agachado2 = false;

// MODO ONESHOT
int chose=0; //1=carrega, 2=bloqueia, 3=atira

// ESTADO DE JOGO
bool bangbang_iniciando = false;
bool oneshot_iniciando = false;
int timer_inicio = 0;

// IA (BANGBANG)
int ia_timer = 0;
int ia_acao = 0; // 0-2: Parar, 3-6: Mover, 9-12: Atirar
int ia_direcao = 1; // 1 para direita, -1 para esquerda
int ia_distancia_reacao = 300;
bool ia_pulando_alto = false;
int ia_timer_pulo_alto = 0;
bool ia_alvo_agachado = false;
int ia_timer_reacao = 0;

// Emotes
bool emote1=false, emote2=false;
int contemt1=0, contemt2=0;

// MODO ONE SHOT
int os_timer = 180; // 180 = 3 segundos.
int os_estado = 0; // 0: Início da rodada, 1: Escolhendo, 2: Resolvendo, 3: Fim da rodada
int os_p1_escolha = 0, os_p2_escolha = 0; // 0:Nenhum, 1:Carregar, 2:Bloquear, 3:Atirar
int os_p1_mun = 0, os_p2_mun = 0;
string os_acao_texto1 = "", os_acao_texto2 = "";
int os_timer_mensagem = 0;
bool oneshotmenu=false;

// Nomes
bool colocarnomes=false;
string nome1="", nome2="";
int jogador_atual = 1; // 1=P1, 2=P2
bool nomes_confirmados = false;


//==================================================================================
// DECLARAÇÃO DAS FUNÇÕES (PROTÓTIPOS)
// (Para que uma função possa chamar outra sem que o compilador reclame da ordem)
//==================================================================================
void adicionar_caracter(string c);
void atirar_bot();
void atualizar_chapeus();
void controle();
void bangbanger();
void oneshoter();
void desenhar();
void resetar_jogo_bangbang();
void resetar_rodada_oneshot();


//==================================================================================
// DEFINIÇÃO DAS FUNÇÕES
//==================================================================================

// Função para input de texto
void adicionar_caracter(string c) {
    if (jogador_atual == 1 && nome1.length() < 20) {
        nome1 = nome1 + c;
    }
    cdpause = 0;
    if (jogador_atual == 2 && nome2.length() < 20) {
        nome2 = nome2 + c;
    }
    cdpause = 0; // Reinicia o timer para evitar spam
}

// TIRO DO BOT (BANGBANG)
void atirar_bot() {
    if (mun2 > 0 && cooldown2 == 0 && r2 == false && timer_inicio<1 && pause==false) {
        for (int i = 0; i < MAX_BALAS; i++) {
            if (!bala2_ativo[i]) {
                bala2_ativo[i] = true;
                bala2v_x[i] = cb2_x - 10;
                if (abx2 == 1) {
                    bala2v_y[i] = cb2_y + 70;
                } else {
                    bala2v_y[i] = cb2_y + 48;
                }
                y_inicial_bala2[i] = bala2v_y[i];
                mun2--;
                if (inv2 == false) {
                    direcao_bala2[i] = -1;
                } else {
                    direcao_bala2[i] = 1;
                }
                cooldown2 = 60; // Cooldown inicia após o tiro
                break;
            }
        }
    }
}

void atualizar_chapeus() {
    if (tem_chapeu1 && !pause) {
        // 1. Define a POSIÇÃO ALVO do chapéu na cabeça do jogador
        float alvo_x1, alvo_y1;
        if(agachado1){
            if(!inv1){ 
                alvo_x1 = cb_x + 15;
                alvo_y1 = cb_y + 30; 
            } else { 
                alvo_x1 = cb_x + 37;
                alvo_y1 = cb_y + 32; 
            }
        } else if(emote1){
            if(contemt1>=20 && contemt1<40){ 
                if(!inv1){
                    alvo_x1 = cb_x + 7;
                    alvo_y1 = cb_y + 6;
                } else {
                     alvo_x1 = cb_x + 15;
                    alvo_y1 = cb_y + 6;
                }
            } else if(contemt1>=40 && contemt1<=60){
                if(!inv1){
                    alvo_x1 = cb_x + 2;
                    alvo_y1 = cb_y + 5;
                } else {
                    alvo_x1 = cb_x + 10;
                    alvo_y1 = cb_y + 6;
                }
            } else {
                if(!inv1){ 
                    alvo_x1 = cb_x + 2;
                    alvo_y1 = cb_y + 5; 
                } else { 
                    alvo_x1 = cb_x + 17;
                    alvo_y1 = cb_y + 5; 
                }
            }
        } else if(passos>=15){
            if(!inv1){ 
                alvo_x1 = cb_x + 4;
                alvo_y1 = cb_y + 7; 
            } else { 
                alvo_x1 = cb_x + 34;
                alvo_y1 = cb_y + 8; 
            }
        } else {
            if(!inv1){ 
                alvo_x1 = cb_x + 2;
                alvo_y1 = cb_y + 5; 
            } else { 
                alvo_x1 = cb_x + 32;
                alvo_y1 = cb_y + 5; 
            }
        }

        // 2. Aplica a FÍSICA
        bool chapeu_esta_na_cabeca = (fabs(chapeu1_y - alvo_y1) < 5.0f);

        if (chapeu_esta_na_cabeca && pulando1 && vel_y1 < 0.0f && !pause) {
            chapeu1_vel_y = vel_y1;
        }

        chapeu1_vel_y += GRAVIDADE_CHAPEU;
        chapeu1_y += chapeu1_vel_y;

        // 3. COLISÃO:
        if (chapeu1_y > alvo_y1) {
            chapeu1_y = alvo_y1;
            chapeu1_vel_y = 0.0f;
        }
        chapeu1_x = alvo_x1;

        if(tem_chapeu1 == true && dead1 == 1 && !pause){
            if(!inv1){ chapeu1_x=cb_x+30; } else { chapeu1_x=cb_x+20; }
            tem_chapeu1=false;
            chapeu1_caindo=true;
        }
        if(chapeu1_y <= 315){
            chapeu1_y = 315;
        }
    } else if (chapeu1_caindo && !pause) {
        chapeu1_x += chapeu1_vel_x;
        chapeu1_y += chapeu1_vel_y;
        chapeu1_vel_y += GRAVIDADE;
        if (chapeu1_y >= CHAO + 105) {
            chapeu1_y = CHAO + 105;
            chapeu1_caindo = false;
        }
    }
    
    // CHAPÉU 2
    if (tem_chapeu2) {
        float alvo_x2, alvo_y2;
        if(agachado2){
            if(!inv2){ 
                alvo_x2 = cb2_x + 33;
                alvo_y2 = cb2_y + 32; 
            } else { 
                alvo_x2 = cb2_x + 12;
                alvo_y2 = cb2_y + 29; 
            }
        } else if(passos2 <= 15){
            if(!inv2){ 
                alvo_x2 = cb2_x + 29;
                alvo_y2 = cb2_y; 
            } else { 
                alvo_x2 = cb2_x - 1;
                alvo_y2 = cb2_y; 
            }
        } else {
            if(!inv2){ 
                alvo_x2 = cb2_x + 28;
                alvo_y2 = cb2_y + 1; 
            } else { 
                alvo_x2 = cb2_x + 7;
                alvo_y2 = cb2_y + 1; 
            }
        }

        bool chapeu2_esta_na_cabeca = (fabs(chapeu2_y - alvo_y2) < 5.0f);

        if (chapeu2_esta_na_cabeca && pulando2 && vel_y2 < 0.0f && !pause) {
            chapeu2_vel_y = vel_y2;
        }

        chapeu2_vel_y += GRAVIDADE_CHAPEU;
        chapeu2_y += chapeu2_vel_y;
        
        if (chapeu2_y > alvo_y2) {
            chapeu2_y = alvo_y2;
            chapeu2_vel_y = 0.0f;
        }
        chapeu2_x = alvo_x2;
        
        if(tem_chapeu2 == true && dead2 == 1 && !pause){
            if(!inv2){ chapeu2_x = cb2_x + 45; } else { chapeu2_x = cb2_x - 15; }
            tem_chapeu2=false;
            chapeu2_caindo=true;
        }
        if(chapeu2_y<=315){
            chapeu2_y=315;
        }
    } else if (chapeu2_caindo && !pause) {
        chapeu2_x += chapeu2_vel_x;
        chapeu2_y += chapeu2_vel_y;
        chapeu2_vel_y += GRAVIDADE;
        if (chapeu2_y >= CHAO + 105) {
            chapeu2_y = CHAO + 105;
            chapeu2_caindo = false;
        }
    }
    if(tem_chapeu2 && emote2){
        if(contemt2 >= 0 && contemt2 <= 20){
            if(!inv2){
                chapeu2_x = cb2_x + 20;
            } else {
                chapeu2_x = cb2_x - 1;
            }
        }
        if(contemt2 >= 20 && contemt2 <= 40){
            if(!inv2){
                chapeu2_x = cb2_x + 10;
            } else {
                chapeu2_x = cb2_x - 1;
            }
        }
        if(contemt2 >= 40 && contemt2 <= 60){
            if(!inv2){
                chapeu2_x = cb2_x + 12;
                chapeu2_y = cb2_y + 2;
            } else {
                chapeu2_x = cb2_x - 3;
                chapeu2_y = cb2_y + 2;
            }
        }
    }
}

void controle() {
    if(menu){
        cdpause++;
        if(IsKeyPressed(KEY_S) && cdpause > 50){
            opt++;
            cdpause = 0;
        }
        if(opt > 4){
            opt = 1;
        }
        if(IsKeyPressed(KEY_W) && cdpause > 50){
            opt--;
            cdpause = 0;
        }
        if(opt < 1){
            opt = 4;
        }
        if(opt == 1 && IsKeyPressed(KEY_SPACE) && cdpause > 50){
            modo = true;
            menu = false;
            solo = true;
            cdpause = 0;
            opt = 1;
        }
        if(menu && opt == 2 && IsKeyPressed(KEY_SPACE) && cdpause > 50){
            colocarnomes = true;
            menu = false;
            solo = false;
            cdpause = 0;
            opt = 1;
        }
        if(opt == 3 && IsKeyPressed(KEY_SPACE)){
            creds = true;
        }
        if(creds && IsKeyPressed(KEY_BACKSPACE)){
            creds = false;
        }
        if(opt == 4 && IsKeyPressed(KEY_SPACE)){
            quit = true;
        }
    }
    
    if(colocarnomes){
        cdpause++;
        if (!nomes_confirmados) {
            if (cdpause > 5) { // Reduzido para melhor responsividade
                // Teclas Especiais
                if (IsKeyPressed(KEY_ENTER)) {
                    if (jogador_atual == 1) {
                        jogador_atual = 2;
                    } else {
                        nomes_confirmados = true;
                    }
                    cdpause = 0;
                } else if (IsKeyPressed(KEY_BACKSPACE)) { 
                    if (jogador_atual == 1) {
                        if (nome1.length() > 0) {
                            nome1 = nome1.substr(0, nome1.length() - 1);
                        }
                    } else if (jogador_atual == 2) {
                        if (nome2.length() > 0) {
                           nome2 = nome2.substr(0, nome2.length() - 1);
                        }
                    }
                    cdpause = 0;
                }
                // Verificação de Teclas Alfanuméricas
                else if (IsKeyPressed(KEY_A)) { adicionar_caracter("A"); }
                else if (IsKeyPressed(KEY_B)) { adicionar_caracter("B"); }
                else if (IsKeyPressed(KEY_C)) { adicionar_caracter("C"); }
                else if (IsKeyPressed(KEY_D)) { adicionar_caracter("D"); }
                else if (IsKeyPressed(KEY_E)) { adicionar_caracter("E"); }
                else if (IsKeyPressed(KEY_F)) { adicionar_caracter("F"); }
                else if (IsKeyPressed(KEY_G)) { adicionar_caracter("G"); }
                else if (IsKeyPressed(KEY_H)) { adicionar_caracter("H"); }
                else if (IsKeyPressed(KEY_I)) { adicionar_caracter("I"); }
                else if (IsKeyPressed(KEY_J)) { adicionar_caracter("J"); }
                else if (IsKeyPressed(KEY_K)) { adicionar_caracter("K"); }
                else if (IsKeyPressed(KEY_L)) { adicionar_caracter("L"); }
                else if (IsKeyPressed(KEY_M)) { adicionar_caracter("M"); }
                else if (IsKeyPressed(KEY_N)) { adicionar_caracter("N"); }
                else if (IsKeyPressed(KEY_O)) { adicionar_caracter("O"); }
                else if (IsKeyPressed(KEY_P)) { adicionar_caracter("P"); }
                else if (IsKeyPressed(KEY_Q)) { adicionar_caracter("Q"); }
                else if (IsKeyPressed(KEY_R)) { adicionar_caracter("R"); }
                else if (IsKeyPressed(KEY_S)) { adicionar_caracter("S"); }
                else if (IsKeyPressed(KEY_T)) { adicionar_caracter("T"); }
                else if (IsKeyPressed(KEY_U)) { adicionar_caracter("U"); }
                else if (IsKeyPressed(KEY_V)) { adicionar_caracter("V"); }
                else if (IsKeyPressed(KEY_W)) { adicionar_caracter("W"); }
                else if (IsKeyPressed(KEY_X)) { adicionar_caracter("X"); }
                else if (IsKeyPressed(KEY_Y)) { adicionar_caracter("Y"); }
                else if (IsKeyPressed(KEY_Z)) { adicionar_caracter("Z"); }
                else if (IsKeyPressed(KEY_SPACE)) { adicionar_caracter(" "); }
                else if (IsKeyPressed(KEY_ZERO)) { adicionar_caracter("0"); }
                else if (IsKeyPressed(KEY_ONE)) { adicionar_caracter("1"); }
                else if (IsKeyPressed(KEY_TWO)) { adicionar_caracter("2"); }
                else if (IsKeyPressed(KEY_THREE)) { adicionar_caracter("3"); }
                else if (IsKeyPressed(KEY_FOUR)) { adicionar_caracter("4"); }
                else if (IsKeyPressed(KEY_FIVE)) { adicionar_caracter("5"); }
                else if (IsKeyPressed(KEY_SIX)) { adicionar_caracter("6"); }
                else if (IsKeyPressed(KEY_SEVEN)) { adicionar_caracter("7"); }
                else if (IsKeyPressed(KEY_EIGHT)) { adicionar_caracter("8"); }
                else if (IsKeyPressed(KEY_NINE)) { adicionar_caracter("9"); }
            }
        }
        if(nomes_confirmados){
            colocarnomes = false;
            modo = true;
        }
    }
    
    if(modo){
        cdpause++;
        if(IsKeyPressed(KEY_BACKSPACE)){
            modo = false;
            colocarnomes = false;
            menu = true;
        }
        if(IsKeyPressed(KEY_S) && cdpause > 50){
            opt++;
            cdpause = 0;
        }
        if(opt > 2){
            opt = 1;
        }
        if(IsKeyPressed(KEY_W) && cdpause > 50){
            opt--;
            cdpause = 0;
        }
        if(opt < 1){
            opt = 2;
        }
        if(opt == 1 && IsKeyPressed(KEY_SPACE) && cdpause > 50){
            menu = false;
            modo = false;
            bangmenu = true;
            oneshot = false;
            cdpause = 0;
        }
        if(opt == 2 && IsKeyPressed(KEY_SPACE) && cdpause > 50){
            menu = false;
            modo = false;
            oneshotmenu = true;
            bangbang = false;
            cdpause = 0;
            os_estado = 0;
        }
    }

    if(bangmenu){
        cdpause++; // Adicionado para o timer funcionar
        if(IsKeyPressed(KEY_SPACE) && cdpause > 50){
            bangmenu = false;
            bangbang = true;
            timer_inicio = 180;
        }
        if(IsKeyPressed(KEY_BACKSPACE)){
            bangmenu = false;
            modo = true;
        }
    }

    if(oneshotmenu){
        cdpause++; // Adicionado para o timer funcionar
        if(IsKeyPressed(KEY_SPACE) && cdpause > 50){
            oneshotmenu = false;
            oneshot = true;
        }
        if(IsKeyPressed(KEY_BACKSPACE)){
            oneshotmenu = false;
            modo = true;
        }
    }
    
    if(IsKeyPressed(KEY_P) && !menu && cdpause > 100 && !modo && !bangmenu && !oneshotmenu){
        pause = true;
        // timer_inicio = 180; // Pausar o timer é melhor que resetar
        cdpause = 0;
    }
    
    // A lógica de despausar está dentro do if(pause)
    
    if(pause){
        cdpause++;
        if(IsKeyPressed(KEY_S) && cdpause > 50){
            opt++;
            cdpause = 0;
        }
        if(opt > 2){
            opt = 1;
        }
        if(IsKeyPressed(KEY_W) && cdpause > 50){
            opt--;
            cdpause = 0;
        }
        if(opt < 1){
            opt = 2;
        }
        if(opt == 1 && IsKeyPressed(KEY_SPACE) && cdpause > 50){
            pause = false;
            cdpause = 0;
        }
        if(opt == 2 && IsKeyPressed(KEY_SPACE) && cdpause > 50){
            pause = false;
            menu = true;
            cdpause = 0;
            opt = 1;
            nomes_confirmados = false;
            jogador_atual = 1;
            nome1 = "";
            nome2 = "";
            resetar_jogo_bangbang(); // Função para resetar o estado
            resetar_rodada_oneshot();
        }
    }
    
    // Este cdpause++ estava fora de qualquer if, movido para o topo do if(menu)
    // cdpause++;
    
    pisca++;
    
    if(!pause && !modo && !menu && !bangmenu && !oneshotmenu && bangbang){
        if(timer_inicio > 0 && !colocarnomes){
            timer_inicio--;
        }

        if(IsKeyDown(KEY_Q)){ // Usando IsKeyDown para segurar
            emote1 = true;
        } else {
            emote1 = false; // Parar o emote quando soltar
        }

        if(emote1){
            contemt1++;
            if(contemt1 > 60){
                contemt1 = 0;
            }
        } else {
            contemt1 = 0;
        }
        
        if(IsKeyDown(KEY_O)){
            emote2 = true;
        } else {
            emote2 = false;
        }
        
        if(emote2){
            contemt2++;
            if(contemt2 > 60){
                contemt2 = 0; // Resetar em vez de fixar em 20
            }
        } else {
            contemt2 = 0;
        }

        if(timer_inicio < 1 && !colocarnomes){
            // PLAYER 1
            if(IsKeyDown(KEY_A) && dead1 == 0 && abx == 0){
                passos++;
                cb_x = cb_x - 3;
            }
            if(IsKeyDown(KEY_D) && dead1 == 0 && abx == 0){
                passos++;
                cb_x = cb_x + 3;
            }
            if(IsKeyDown(KEY_S) && dead1 == 0){
                agachado1 = true;
                abx = 1;
                // A lógica para derrubar chapéu foi movida para bangbanger
            } else {
                agachado1 = false;
                abx = 0;
            }

            // RECARGA
            if(mun < 1 && dead1 == 0){
                r1 = true;
            }
            if(r1){
                r1c--;
            }
            if(r1c <= 0){
                r1 = false;
                mun = 6;
                r1c = 600;
            }

            // COLISÕES
            if(cb_x > 1150) cb_x = 1150;
            if(cb_x < 0) cb_x = 0;
            // Colisão entre players
            if(cb_y+3 >= cb2_y && cb_y <= cb2_y+100 && cb_x > cb2_x && cb_x < cb2_x+10){
                cb_x = cb2_x;
            }
            if(cb_y+3 >= cb2_y && cb_y <= cb2_y+100 && cb_x+50 > cb2_x+50 && cb_x < cb2_x+50){
                cb_x = cb2_x+50;
            }

            // Lógica de pulo Player 1
            if(IsKeyDown(KEY_W) && !pulando1 && cb_y >= CHAO && dead1 == 0){
                pulando1 = true;
                vel_y1 = -FORCA_PULO_INICIAL;
            }
            if(pulando1 && !pause){
                if(IsKeyDown(KEY_W) && vel_y1 < 0){
                    vel_y1 -= FORCA_PULO_SUSTENTADA;
                }
                cb_y += vel_y1;
                vel_y1 += GRAVIDADE;
                if(cb_y >= CHAO){
                    cb_y = CHAO;
                    vel_y1 = 0.0f;
                    pulando1 = false;
                }
            }

            // PLAYER 2
            if(!solo){
                if(IsKeyDown(KEY_J) && dead2 == 0 && abx2 == 0){
                    cb2_x -= 3;
                    passos2++;
                }
                if(IsKeyDown(KEY_L) && dead2 == 0 && abx2 == 0){
                    cb2_x += 3;
                    passos2++;
                }
                if(IsKeyDown(KEY_K) && dead2 == 0){
                    agachado2 = true;
                    abx2 = 1;
                } else {
                    agachado2 = false;
                    abx2 = 0;
                }
                if(IsKeyDown(KEY_I) && !pulando2 && cb2_y >= CHAO && !pause){
                    pulando2 = true;
                    vel_y2 = -FORCA_PULO_INICIAL;
                }
            } else { // MODO SOLO - CONTROLE DO BOT
                if (dead2 == 0 && !pause) {
                    // PARTE 1: PERCEPÇÃO
                    if (agachado1 && !ia_alvo_agachado) {
                        ia_alvo_agachado = true;
                        ia_timer_reacao = GetRandomValue(20, 50);
                    } else if (!agachado1 && ia_alvo_agachado) {
                        ia_alvo_agachado = false;
                        ia_timer_reacao = GetRandomValue(20, 50);
                    }
            
                    // PARTE 2: EXECUÇÃO
                    if (ia_timer_reacao > 0) {
                        ia_timer_reacao--;
                    } else if (ia_alvo_agachado) {
                        agachado2 = true;
                        abx2 = 1;
                        atirar_bot();
                    } else {
                        agachado2 = false;
                        abx2 = 0;
                        
                        bool deve_esquivar = false;
                        for (int i = 0; i < MAX_BALAS; i++) {
                            if (bala1_ativo[i]) {
                                bool bala_vindo = (direcao_bala1[i] == 1 && bala1v_x[i] < cb2_x) || (direcao_bala1[i] == -1 && bala1v_x[i] > cb2_x);
                                if (bala_vindo) {
                                    int distancia_bala = abs(bala1v_x[i] - (cb2_x + 25));
                                    if (distancia_bala <= ia_distancia_reacao) {
                                        deve_esquivar = true;
                                        break;
                                    }
                                }
                            }
                        }
            
                        if (deve_esquivar) {
                            if (GetRandomValue(0, 1) == 0 && !pulando2) {
                                pulando2 = true;
                                vel_y2 = -FORCA_PULO_INICIAL;
                                ia_pulando_alto = true;
                                ia_timer_pulo_alto = 20;
                            } else {
                                agachado2 = true;
                                abx2 = 1;
                            }
                        } else {
                            ia_timer--;
                            if (ia_timer <= 0) {
                                ia_acao = GetRandomValue(0, 12);
                                ia_timer = GetRandomValue(40, 100);
                                if (ia_acao >= 3 && ia_acao <= 6) {
                                    ia_direcao = GetRandomValue(0, 1) * 2 - 1;
                                }
                            }
                            
                            if ((ia_acao >= 3 && ia_acao <= 6)) {
                                if (cb2_x <= 0) { ia_direcao = 1; } 
                                else if (cb2_x >= 1150) { ia_direcao = -1; }
                                cb2_x += (3 * ia_direcao);
                                passos2++;
                            }
                            if (ia_acao >= 9) {
                                int distancia = cb_x - cb2_x;
                                bool na_mira = (distancia < 0 && inv2 == false) || (distancia > 0 && inv2 == true);
                                if (na_mira) {
                                    atirar_bot();
                                }
                            }
                        }
                    }
                }
            }
            // FIM DA LÓGICA DA IA

            if(mun2 < 1 && dead2 == 0){
                r2 = true;
            }
            if(r2 && !pause){
                r2c--;
            }
            if(r2c <= 0){
                r2 = false;
                mun2 = 6;
                r2c = 600;
            }

            // COLISÕES P2
            if(cb2_x > 1150) cb2_x = 1150;
            if(cb2_x < 0) cb2_x = 0;
            if(cb2_y+3>=cb_y && cb2_y<=cb_y+100 && cb2_x+50>cb_x && cb2_x+50<cb_x+10){
                cb2_x = cb_x - 50;
            }
            if(cb2_y+3>=cb_y && cb2_y<=cb_y+100 && cb2_x-3<=cb_x+50 && cb2_x+50>cb_x+50){
                cb2_x = cb_x + 50;
            }
            
            if(pulando2 && !pause){
                if (solo) {
                    if (ia_pulando_alto && ia_timer_pulo_alto > 0) {
                        vel_y2 -= FORCA_PULO_SUSTENTADA;
                        ia_timer_pulo_alto--;
                    } else {
                        ia_pulando_alto = false;
                    }
                } else {
                    if (IsKeyDown(KEY_I) && vel_y2 < 0) {
                        vel_y2 -= FORCA_PULO_SUSTENTADA;
                    }
                }
                cb2_y += vel_y2;
                vel_y2 += GRAVIDADE;
                if(cb2_y >= CHAO){
                    cb2_y = CHAO;
                    vel_y2 = 0.0f;
                    pulando2 = false;
                    ia_pulando_alto = false;
                }
            }

            // Lógica de entrada para o modo bangbang
            if(bangbang){
                bool espaco_atual = IsKeyDown(KEY_SPACE);
                bool m_atual = IsKeyDown(KEY_M);

                if(IsKeyPressed(KEY_SPACE) && mun > 0 && cooldown1 == 0 && !r1 && !pause){
                    for (int i = 0; i < MAX_BALAS; i++){
                        if(!bala1_ativo[i]){
                            bala1_ativo[i] = true;
                            bala1v_x[i] = cb_x + 53;
                            if(abx==1){
                                bala1v_y[i] = cb_y + 70;
                            } else {
                                bala1v_y[i] = cb_y + 48;
                            }
                            y_inicial_bala1[i] = bala1v_y[i];
                            mun--;
                            cooldown1 = 60;
                            if(!inv1){
                                direcao_bala1[i] = 1;
                            } else {
                                direcao_bala1[i] = -1;
                            }
                            ia_distancia_reacao = GetRandomValue(50, 450);
                            break;
                        }
                    }
                }
                
                if(!solo) {
                    if(IsKeyPressed(KEY_M) && mun2 > 0 && cooldown2 == 0 && !r2 && !pause){
                        for (int i = 0; i < MAX_BALAS; i++){
                            if(!bala2_ativo[i]){
                                bala2_ativo[i] = true;
                                bala2v_x[i] = cb2_x - 10;
                                if(abx2==1){
                                    bala2v_y[i] = cb2_y + 70;
                                } else {
                                    bala2v_y[i] = cb2_y + 42;
                                }
                                y_inicial_bala2[i] = bala2v_y[i];
                                mun2--;
                                if(!inv2){
                                    direcao_bala2[i] = -1;
                                } else {
                                    direcao_bala2[i] = 1;
                                }
                                cooldown2 = 60;
                                break;
                            }
                        }
                    }
                }
            }
        }
    }
}

void bangbanger(){
    // Hitbox Player 1
    hb1x = cb_x + 10;
    if(agachado1){ hb1y = cb_y + 10 + 60; } else { hb1y = cb_y + 10; }

    // Hitbox Player 2
    hb2x = cb2_x + 40;
    if(agachado2){ hb2y = cb2_y + 10 + 60; } else { hb2y = cb2_y + 10; }

    atualizar_chapeus();

    if(cooldown1 > 0) cooldown1--;
    if(cooldown2 > 0) cooldown2--;

    for (int i = 0; i < MAX_BALAS; i++){
        if(bala1_ativo[i]){
            if(!pause && timer_inicio < 1) {
                bala1v_x[i] += (VELOCIDADE_BALA * direcao_bala1[i]);
            }
            Rectangle bala_rec1 = {(float)bala1v_x[i], (float)bala1v_y[i], 20, 3};
            Rectangle hb2_rec = {(float)hb2x, (float)hb2y, 30, (agachado2 ? 60.0f : 120.0f)}; // Hitbox ajustada

            if(CheckCollisionRecs(bala_rec1, hb2_rec)){
                vida2 -= DANOO;
                bala1_ativo[i] = false;
                qntsang2 = GetRandomValue(3,5);
                
                if(qntsang2 >= 1){
                    sang21 = true;
                    sang2x1 = inv2 ? cb2_x-15 : cb2_x + 80;
                    sang2y1 = cb2_y + 50;
                    tamsang2x1 = GetRandomValue(5, 20); tamsang2y1 = tamsang2x1;
                    cont2sang1 = GetRandomValue(30, 60);
                    sang2_vel_x1 = GetRandomValue(-5, 1); sang2_vel_y1 = GetRandomValue(-2, 2);
                }
                if(qntsang2 >= 2){
                    sang22 = true;
                    sang2x2 = inv2 ? cb2_x-15 : cb2_x + 80;
                    sang2y2 = cb2_y + 50;
                    tamsang2x2 = GetRandomValue(5, 20); tamsang2y2 = tamsang2x2;
                    cont2sang2 = GetRandomValue(30, 60);
                    sang2_vel_x2 = GetRandomValue(-5, 1); sang2_vel_y2 = GetRandomValue(-2, 2);
                }
                // ... (código similar para sang23, sang24, sang25)
                
                vel_x_knock2 = !inv1 ? KNOCKBACK_FORCA : -KNOCKBACK_FORCA;
            } else if(bala1v_x[i] > 1200 || bala1v_x[i] < 0){
                bala1_ativo[i] = false;
            }
        }

        if(bala2_ativo[i]){
            if(!pause && timer_inicio < 1){
                bala2v_x[i] += (VELOCIDADE_BALA * direcao_bala2[i]);
            }
            Rectangle bala_rec2 = {(float)bala2v_x[i], (float)bala2v_y[i], 20, 3};
            Rectangle hb1_rec = {(float)hb1x, (float)hb1y, 30, (agachado1 ? 60.0f : 120.0f)}; // Hitbox ajustada

            if(CheckCollisionRecs(bala_rec2, hb1_rec)){
                vida -= DANOO;
                bala2_ativo[i] = false;
                qntsang = GetRandomValue(3,5);

                if(qntsang >= 1){
                    sang1 = true;
                    sangx1 = inv1 ? cb_x+70 : cb_x-20;
                    sangy1 = cb_y + 50;
                    tamsangx1 = GetRandomValue(5, 20); tamsangy1 = tamsangx1;
                    contsang1 = GetRandomValue(30, 60);
                    sang_vel_x1 = GetRandomValue(-1, 5); sang_vel_y1 = GetRandomValue(-2, 2);
                }
                // ... (código similar para sang2, sang3, sang4, sang5)

                vel_x_knock1 = !inv2 ? -KNOCKBACK_FORCA : KNOCKBACK_FORCA;
            } else if(bala2v_x[i] < 0 || bala2v_x[i] > 1200){
                bala2_ativo[i] = false;
            }
        }
    }

    if(vida <= 0 && dead1 == 0){
        dead1 = 1; morrendo1 = true;
        vel_x_morte1 = cb_y >= CHAO ? EMPURRAO_CHAO : EMPURRAO_AR_X;
        vel_y_morte1 = cb_y >= CHAO ? 0.0f : EMPURRAO_AR_Y;
    }
    if(vida2 <= 0 && dead2 == 0){
        dead2 = 1; morrendo2 = true;
        vel_x_morte2 = cb2_y >= CHAO ? -EMPURRAO_CHAO : -EMPURRAO_AR_X;
        vel_y_morte2 = cb2_y >= CHAO ? 0.0f : EMPURRAO_AR_Y;
    }

    if(vel_x_knock1 != 0){
        cb_x += vel_x_knock1;
        if(vel_x_knock1 > 0){
            vel_x_knock1 -= DESACELERACAO_KNOCK;
            if(vel_x_knock1 < 0) vel_x_knock1 = 0;
        } else {
            vel_x_knock1 += DESACELERACAO_KNOCK;
            if(vel_x_knock1 > 0) vel_x_knock1 = 0;
        }
    }
    if(vel_x_knock2 != 0){
        cb2_x += vel_x_knock2;
        if(vel_x_knock2 > 0){
            vel_x_knock2 -= DESACELERACAO_KNOCK;
            if(vel_x_knock2 < 0) vel_x_knock2 = 0;
        } else {
            vel_x_knock2 += DESACELERACAO_KNOCK;
            if(vel_x_knock2 > 0) vel_x_knock2 = 0;
        }
    }
    
    if(morrendo1){
        cb_x += vel_x_morte1;
        cb_y += vel_y_morte1;
        vel_y_morte1 += GRAVIDADE;
        // ... (lógica de desaceleração de morte)
        if(cb_y >= CHAO) { cb_y = CHAO; morrendo1 = false; }
    }
    if(morrendo2){
        cb2_x += vel_x_morte2;
        cb2_y += vel_y_morte2;
        vel_y_morte2 += GRAVIDADE;
        // ... (lógica de desaceleração de morte)
        if(cb2_y >= CHAO) { cb2_y = CHAO; morrendo2 = false; }
    }

    if(dead1 > 0) fall++;
    if(dead2 > 0) fall2++;

    inv1 = cb_x > cb2_x;
    inv2 = cb2_x < cb_x;
    
    // O DESENHO ESTÁ NA FUNÇÃO desenhar()
}

void oneshoter() {
    cb_x = 100;
    cb2_x = 1100;
    tem_chapeu1 = true;
    tem_chapeu2 = true;

    if (os_estado == 0 && !oneshotmenu) {
        os_timer = 180; os_p1_escolha = 0; os_p2_escolha = 0;
        os_acao_texto1 = ""; os_acao_texto2 = "";
        dead1 = 0; dead2 = 0; fall = 0; fall2 = 0;
        os_estado = 1;
    }

    if (os_estado == 1 && !oneshotmenu && !pause) {
        if (os_timer > 0) {
            os_timer--;
            if (IsKeyPressed(KEY_A)) os_p1_escolha = 1;
            if (IsKeyPressed(KEY_S)) os_p1_escolha = 2;
            if (IsKeyPressed(KEY_D) && os_p1_mun > 0) os_p1_escolha = 3;

            if (!solo) {
                if (IsKeyPressed(KEY_J)) os_p2_escolha = 1;
                if (IsKeyPressed(KEY_K)) os_p2_escolha = 2;
                if (IsKeyPressed(KEY_L) && os_p2_mun > 0) os_p2_escolha = 3;
            } else {
                if(os_timer == 1) { // IA decide no último frame
                    if (os_p1_mun == 0 && os_p2_mun == 0) {
                        os_p2_escolha = 1;
                    } else {
                        if (os_p2_mun > 0) {
                            os_p2_escolha = GetRandomValue(1, 3);
                        } else {
                            os_p2_escolha = GetRandomValue(1, 2);
                        }
                    }
                }
            }
        } else {
            os_estado = 2;
        }
    }

    if (os_estado == 2) {
        if (os_p1_escolha == 3 && os_p2_escolha == 1) dead2 = 1;
        if (os_p2_escolha == 3 && os_p1_escolha == 1) dead1 = 1;
        if (os_p1_escolha == 3 && os_p2_escolha == 3) { dead1=1; dead2=1; }
        if (os_p1_escolha == 3 && os_p2_escolha == 0) dead2 = 1;
        if (os_p2_escolha == 3 && os_p1_escolha == 0) dead1 = 1;
        if (os_p1_escolha == 1 && dead1 == 0) os_p1_mun++;
        if (os_p2_escolha == 1 && dead2 == 0) os_p2_mun++;
        if (os_p1_escolha == 3 && dead1 == 0) os_p1_mun--;
        if (os_p2_escolha == 3 && dead2 == 0) os_p2_mun--;

        os_estado = 3;
        if (dead1 == 0 && dead2 == 0) {
            os_timer_mensagem = 120;
        }
    }

    if (os_estado == 3) {
        if (dead1 == 1) fall++;
        if (dead2 == 1) fall2++;

        if (dead1 == 1 || dead2 == 1) {
            if (IsKeyPressed(KEY_R)) {
                if (dead1 == 1 && dead2 == 0) win2++;
                if (dead2 == 1 && dead1 == 0) win1++;
                os_p1_mun = 0; os_p2_mun = 0;
                os_estado = 0;
            }
        } else {
            if (os_timer_mensagem > 0 && !pause) {
                os_timer_mensagem--;
            }

            if (IsKeyPressed(KEY_SPACE)) {
                os_estado = 0;
            }
        }
    }
}

void desenhar() {
    BeginDrawing();
    ClearBackground(RAYWHITE);
    DrawTexture(cenario, 0, 0, WHITE);

    if(menu){
        DrawRectangle(520, 410, 130, 30, WHITE);
        // ... (outros retângulos do menu)
        if(opt == 1) DrawRectangle(520, 410, 130, 30, RED);
        if(opt == 2) DrawRectangle(500, 440, 167, 35, RED);
        if(opt == 3) DrawRectangle(534, 480, 100, 32, RED);
        if(opt == 4) DrawRectangle(556, 520, 55, 32, RED);
        
        if(!creds){
            DrawTexture(menui, 494, 402, WHITE);
            // Nuvens
            DrawEllipse(n1x, n1y, tamx, tamy, WHITE);
            DrawEllipse(n2x, n2y, tamx2, tamy2, WHITE);
            // ... (outras nuvens)
            DrawTexture(logo, 310, 60, WHITE);
        }
        DrawTextureRec(cb1, {0, 0, 74, 119}, {(float)cb_x, (float)cb_y}, WHITE);
        DrawTextureRec(cb2, {0, 0, 74, 119}, {(float)cb2_x, (float)cb2_y}, WHITE);
        
        if(creds){
            DrawTexture(credits, 0, 0, WHITE);
        }
        DrawTexture(chapeu1, chapeu1_x, chapeu1_y, WHITE);
        DrawTexture(chapeu2, chapeu2_x, chapeu2_y, WHITE);
    }
    
    if(modo){
        // ... (desenho do menu de modo)
        DrawTexture(modoi, 470, 350, WHITE);
        DrawTexture(back, 950, 100, WHITE);
        DrawTextureRec(cb1, {0, 0, 74, 119}, {(float)cb_x, (float)cb_y}, WHITE);
        DrawTextureRec(cb2, {0, 0, 74, 119}, {(float)cb2_x, (float)cb2_y}, WHITE);
        DrawTexture(chapeu1, chapeu1_x, chapeu1_y, WHITE);
        DrawTexture(chapeu2, chapeu2_x, chapeu2_y, WHITE);
    }

    if(bangmenu){
        pisca++;
        if(pisca > 80) pisca = 0; // Ajustado
        DrawTexture(bangbangcontrols, 0, 0, WHITE);
        if(pisca < 40) DrawTexture(start, 500, 400, WHITE);
        DrawTexture(back, 950, 100, WHITE);
    }
    
    if(!menu && !modo && !quit && !bangmenu){
        DrawTexture(cenario, cenario_x, cenario_y, WHITE);
        // ... (desenho das nuvens)
        
        if(bangbang){
            // Desenho dos personagens está dentro de bangbanger agora
            bangbanger(); 
             // Desenhar sangue P1
            if(sang1) DrawEllipse(sangx1, sangy1, tamsangx1, tamsangy1, RED);
            if(sang2) DrawEllipse(sangx2, sangy2, tamsangx2, tamsangy2, RED);
            // ... (outros sangues)
            
            // Desenhar sangue P2
            if(sang21) DrawEllipse(sang2x1, sang2y1, tamsang2x1, tamsang2y1, RED);
            if(sang22) DrawEllipse(sang2x2, sang2y2, tamsang2x2, tamsang2y2, RED);
            // ... (outros sangues)
            
            // Desenho do Player 1
            if(dead1 == 0){
                Rectangle sourceRec1;
                if(abx == 1) sourceRec1 = {610, 0, 89, 120};
                else if(pulando1) sourceRec1 = {154, 0, 73, 114};
                else if(emote1) {
                     if(contemt1 < 20) sourceRec1 = {709, 0, 57, 125};
                     else if(contemt1 < 40) sourceRec1 = {851, 0, 59, 125};
                     else sourceRec1 = {783, 0, 54, 125};
                }
                else if(passos > 15) sourceRec1 = {80, 0, 74, 119};
                else sourceRec1 = {0, 0, 74, 119};
                DrawTextureRec(inv1 ? cb1i : cb1, sourceRec1, {(float)cb_x, (float)cb_y}, WHITE);
            } else {
                Rectangle sourceRec1;
                if(fall < 25) sourceRec1 = {230, 0, 88, 120};
                else if(fall < 50) sourceRec1 = {333, 0, 119, 120};
                else sourceRec1 = {470, 0, 126, 120};
                DrawTextureRec(inv1 ? cb1i : cb1, sourceRec1, {(float)cb_x - (fall > 25 ? 30 : 0), (float)cb_y}, WHITE);
            }

            // Desenho do Player 2
            if(dead2 == 0){
                 // ... (lógica de desenho do P2 similar ao P1)
                Rectangle sourceRec2 = {0, 0, 74, 119}; // Simplificado
                DrawTextureRec(inv2 ? cb2i : cb2, sourceRec2, {(float)cb2_x, (float)cb2_y}, WHITE);
            } else {
                // ... (lógica de morte do P2)
            }
            
            DrawTexture(chapeu1, chapeu1_x, chapeu1_y, WHITE);
            DrawTexture(chapeu2, chapeu2_x, chapeu2_y, WHITE);

            // ... (desenho de balas, UI, etc.)
            DrawText(TextFormat("%s", nome1.c_str()), 105, 110, 20, BLACK);
            DrawText(solo ? "BOT" : TextFormat("%s", nome2.c_str()), solo ? 1045 : 980, 110, 20, BLACK);
        }

        if (oneshot) {
            oneshoter();
            bangbanger(); // Para desenhar os personagens

            // UI do One Shot
            DrawText(TextFormat("Munição: %d", os_p1_mun), 100, 170, 20, BLACK);
            DrawText(TextFormat("Munição: %d", os_p2_mun), 950, 170, 20, BLACK);
            // ... (restante da UI do oneshot)
        }

        if(colocarnomes){
            // ... (desenho da tela de nomes)
             DrawText(TextFormat("%s", nome1.c_str()), 310, 260, 30, BLACK);
            if (jogador_atual == 1 && pisca < 30) {
                DrawText("_", 310 + MeasureText(nome1.c_str(), 30), 260, 30, BLACK);
            }
             DrawText(TextFormat("%s", nome2.c_str()), 310, 460, 30, BLACK);
            if (jogador_atual == 2 && pisca < 30) {
                 DrawText("_", 310 + MeasureText(nome2.c_str(), 30), 460, 30, BLACK);
            }
        }
        
        // ... (restante da lógica de desenho de vitória/derrota)
        if(dead1==0 && dead2>0 && bangbang){
            DrawTexture(p1wins, 320, 200, WHITE);
            DrawText("'R' Para Reiniciar", 500, 400, 20, BLACK);
            if(IsKeyPressed(KEY_R)){
                win1++;
                resetar_jogo_bangbang();
            }
        }
        // ... (lógica similar para outras condições de vitória)
    }

    if(pause){
        // Desenho do menu de pause
        DrawRectangle(514, 435, 108, 35, WHITE);
        DrawRectangle(525, 475, 72, 25, WHITE);
        if(opt == 1) DrawRectangle(514, 435, 108, 35, RED);
        if(opt == 2) DrawRectangle(525, 475, 72, 25, RED);
        DrawTexture(pauser, 500, 350, WHITE);
    }
    
    EndDrawing();
}

void resetar_jogo_bangbang() {
    vida = 100; vida2 = 100; dnv = 0; dead1 = 0; dead2 = 0;
    mun = 6; mun2 = 6; fall = 0; fall2 = 0;
    cb_x = 100; cb2_x = 1100; cb_y = CHAO; cb2_y = CHAO;
    for (int i = 0; i < MAX_BALAS; i++) {
        bala1_ativo[i] = false;
        bala2_ativo[i] = false;
    }
    cooldown1 = 0; cooldown2 = 0;
    vel_x_knock1 = 0.0f; vel_x_knock2 = 0.0f;
    morrendo1 = false; morrendo2 = false;
    pulando1 = false; pulando2 = false;
    tem_chapeu1 = true; tem_chapeu2 = true;
}

void resetar_rodada_oneshot(){
    win1 = 0; win2 = 0;
    os_p1_mun = 0; os_p2_mun = 0;
    os_estado = 0;
}


//==================================================================================
// FUNÇÃO PRINCIPAL (inicio)
//==================================================================================
int main(void)
{
    InitWindow(tamtelax, tamtelay, "Red Dead Rosca");
    SetTargetFPS(60);

    // Carregar todas as texturas APÓS inicializar a janela
    cenario = LoadTexture("Red Dead Rosca/senaryo t.png");
    roleta = LoadTexture("Red Dead Rosca/roleta.png");
    bala = LoadTexture("Red Dead Rosca/bala.png");
    p1wins = LoadTexture("Red Dead Rosca/viado 1 wins.png");
    p2wins = LoadTexture("Red Dead Rosca/viado 2 wins.png");
    neg = LoadTexture("Red Dead Rosca/negao da pica cort.png");
    oneshotcontrols = LoadTexture("Red Dead Rosca/ONESHOT CONTROLS.png");
    bangbangcontrols = LoadTexture("Red Dead Rosca/BANGBANG CONTROLS.png");
    start = LoadTexture("Red Dead Rosca/START.png");
    p1controls = LoadTexture("Red Dead Rosca/player1controls.png");
    p2controls = LoadTexture("Red Dead Rosca/player2controls.png");
    contag = LoadTexture("Red Dead Rosca/3 2 1.png");
    back = LoadTexture("Red Dead Rosca/BACK.png");
    pauser = LoadTexture("Red Dead Rosca/pause.png");
    cb1 = LoadTexture("Red Dead Rosca/cb1 completo.png");
    cb1i = LoadTexture("Red Dead Rosca/cb1inv.png");
    cb2 = LoadTexture("Red Dead Rosca/cb2 completo.png");
    cb2i = LoadTexture("Red Dead Rosca/cb2inv.png");
    chapeu1 = LoadTexture("Red Dead Rosca/chapeu1.png");
    chapeu2 = LoadTexture("Red Dead Rosca/chapeu2.png");
    credits = LoadTexture("Red Dead Rosca/red dead rosca credits.png");
    menui = LoadTexture("Red Dead Rosca/menurosca1.png");
    logo = LoadTexture("Red Dead Rosca/RDR logo.png");
    modoi = LoadTexture("Red Dead Rosca/selesao de modo rosca.png");
    
    // Inicializar posições de nuvens aleatoriamente
    n1x = GetRandomValue(0,100); n1y = GetRandomValue(0,100);
    // ... inicializar outras nuvens
    
    // Inicializar posições de chapéus
    chapeu1_x = cb_x + 2;
    chapeu1_y = cb_y + 5;
    chapeu2_x = cb2_x + 29;
    chapeu2_y = cb2_y;

    while (!WindowShouldClose() && !quit)
    {
        controle();
        desenhar();
    }

    // Descarregar todas as texturas da memória
    UnloadTexture(cenario);
    UnloadTexture(roleta);
    UnloadTexture(bala);
    UnloadTexture(p1wins);
    // ... descarregar TODAS as outras texturas

    CloseWindow();
    return 0;
}